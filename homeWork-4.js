// 1. Почему массивы в JS являются "неправильными" и совмещают в себе несколько
// структур данных? Какие ?

/* Неправильность массивов заключается в следующем:
    - Непрерывные и динамические: Массивы в JavaScript динамически расширяются при добавлении новых
элементов и автоматически изменяют свой размер.
    - Гибкость типов данных: В других языках массивы часто должны содержать элементы одного типа 
данных. В JavaScript массивы могут содержать элементы различных типов, что может привести к 
неочевидному поведению при работе с ними.
    - Гибкость структуры: Возможность изменять их длину, добавлять и удалять элементы, а также 
менять порядок элементов в массиве делает их более гибкими по сравнению с массивами в некоторых 
других языках программирования.
    - Методы массива: JavaScript предоставляет множество методов для работы с массивами, таких как 
push, pop, splice и другие, которые могут изменять массивы в процессе выполнения программы.

Массивы в JS совмещают в себе следующие структуры данных:
 1) Queue 
 2) Stack
 3) Linked List
 4) Binary Tree
 
 */

// 2.  Привязать контекст объекта к функции так, чтобы при вызове функции ${this.item} имело 
//  значение - 'some value'. Привязать через bind, call, apply

const obj = { item: 'some value' };

function logger() {
  console.log(`I output only external context: ${this.item}`);
}

logger.bind(obj)();
logger.call(obj);
logger.apply(obj);

// 3. Реализовать полифил метода bind()

Function.prototype.myBind = function (context, ...args){
    return (...innerArgs) => this.apply(context, args.concat(innerArgs));
}

logger.myBind(obj)();
  


